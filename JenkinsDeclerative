pipeline{

agent any

options {
  timestamps()
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
  
}

triggers {
  pollSCM('* * * * *')
  //cron ('* * * * *')
}


tools{
maven 'maven-3.8.6'
}

parameters
{
choice(choices: ['master', 'development', 'uat', 'test', 'stage'], description: 'select the Branch Name', name: 'BranchName') 
string(defaultValue: 'Girsh Reddy', description: 'Give the name parameter value', name: 'Name')
}
stages{

stage('CheckOutCode'){
steps{
slackNotifications('STARTED')
git branch: "${params.BranchName}", credentialsId: '88ac761b-eefd-4a3d-94b0-c0469dddd23f', url: 'https://github.com/kiranreddygowra/maven-web-application.git'
}
}

stage('Build'){
steps{
sh "mvn clean package"
}
}

/*
//This Stage will be execute SonarQube Report
stage('ExecuteSonarQubeReport'){
steps{
sh "mvn clean sonar:sonar"
}
}
//This stage will Upload the Artifcats into Nexus Repos
stage('UploadArtifactIntoArtifactoryRepo'){
steps{
sh "mvn clean deploy"
}
}

stage('DeployAppIntoTomcatServer'){
steps{
sshagent(['c190d424-ea9c-48e7-9487-3d348a07a503']) {
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.39.114:/opt/apache-tomcat-9.0.65/webapps/"
}
}
}

*/
}//stages closing

post {
  success {
    slackNotifications(currentBuild.result)
  }
  failure {
    slackNotifications(currentBuild.result)
  }
}
}//pipeline closing

/*
//Code Snippet for sending slack notifications.

def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'
  
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorName = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    colorName = 'GREEN'
    colorCode = '#00FF00'
  } else {
    colorName = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "#testproject")
}

*/
